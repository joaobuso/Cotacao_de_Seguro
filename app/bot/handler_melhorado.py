import os
import openai
from dotenv import load_dotenv
from ..utils.animal_data_collector import AnimalDataCollector
from ..utils.whatsapp_file_manager import send_pdf_to_whatsapp
from ..bot.swissre_melhorado import executar_cotacao_swissre
from ..db import database

# Carregar vari√°veis de ambiente
dotenv_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), ".env")
load_dotenv(dotenv_path=dotenv_path)

# Configurar a API da OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# Palavras-chave que podem indicar um pedido de handoff
HANDOFF_KEYWORDS = [
    "atendente", "humano", "pessoa", "agente", "falar com algu√©m", 
    "falar com uma pessoa", "suporte", "ajuda humana", "operador"
]

def get_bot_response(user_message, phone_number, conversation_id):
    """
    Obt√©m uma resposta do bot para a mensagem do usu√°rio.
    Retorna uma tupla (resposta, is_handoff_request, pdf_path).
    """
    # Verificar se √© um pedido de handoff
    is_handoff_request = any(keyword.lower() in user_message.lower() for keyword in HANDOFF_KEYWORDS)
    
    if is_handoff_request:
        return "Entendi que voc√™ gostaria de falar com um atendente humano. Estou transferindo sua conversa para um de nossos agentes. Por favor, aguarde um momento.", True, None
    
    # Inicializar coletor de dados do animal
    data_collector = AnimalDataCollector(phone_number)
    
    # Extrair e atualizar dados da mensagem
    updated_fields = data_collector.extract_and_update_data(user_message)
    
    # Salvar dados atualizados
    if updated_fields and conversation_id:
        data_collector.save_data(conversation_id)
    
    # Verificar se todos os dados foram coletados
    if data_collector.is_complete():
        # Todos os dados foram coletados, iniciar processo de cota√ß√£o
        return processar_cotacao_completa(data_collector, phone_number)
    
    # Ainda faltam dados, gerar resposta do bot
    try:
        # Preparar contexto para o bot
        dados_coletados = data_collector.get_summary()
        campos_faltantes = data_collector.get_missing_fields()
        
        # Criar prompt personalizado baseado no estado atual
        if not data_collector.data:
            # Primeira intera√ß√£o
            system_prompt = """
            Voc√™ √© um assistente de seguros para equinos da empresa **Equinos Seguros**, especializado em cota√ß√£o de seguros Pecu√°rio Individual, Rebanhos ou animais de Competi√ß√£o e Exposi√ß√£o.

            Esta √© a primeira intera√ß√£o com o cliente. Apresente-se de forma calorosa e explique que voc√™ ir√° coletar as informa√ß√µes necess√°rias para realizar a cota√ß√£o do seguro.

            Explique que precisa das seguintes informa√ß√µes obrigat√≥rias:
            - Nome do Animal
            - Valor do Animal
            - N√∫mero de Registro ou Passaporte (se tiver)
            - Ra√ßa
            - Data de Nascimento
            - Sexo (inteiro, castrado ou f√™mea)
            - Utiliza√ß√£o (lazer, salto, la√ßo etc.)
            - Endere√ßo da Cocheira (CEP e cidade)

            Pe√ßa para o cliente come√ßar fornecendo essas informa√ß√µes. Seja acolhedor e profissional.
            Responda em portugu√™s do Brasil, de forma clara e objetiva. Limite suas respostas a 3-4 frases curtas.
            """
        else:
            # Intera√ß√µes subsequentes
            system_prompt = f"""
            Voc√™ √© um assistente de seguros para equinos da empresa **Equinos Seguros**.

            DADOS J√Å COLETADOS:
            {dados_coletados}

            CAMPOS AINDA FALTANTES:
            {', '.join(campos_faltantes) if campos_faltantes else 'Nenhum'}

            Sua tarefa √©:
            1. Agradecer pelas informa√ß√µes fornecidas
            2. Se ainda faltam campos, perguntar especificamente pelos campos faltantes
            3. Ser educado e encorajador
            4. Manter o foco na coleta de dados

            Responda em portugu√™s do Brasil, de forma clara e objetiva. Limite suas respostas a 3-4 frases curtas.
            """
        
        # Usar a API da OpenAI para gerar uma resposta
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ],
            max_tokens=150,
            temperature=0.7
        )
        
        # Extrair a resposta do modelo
        bot_response = response.choices[0].message.content.strip()
        
        # Se foram atualizados campos, mencionar isso na resposta
        if updated_fields:
            field_names = [AnimalDataCollector.REQUIRED_FIELDS[field] for field in updated_fields]
            bot_response += f"\n\n‚úÖ Atualizei: {', '.join(field_names)}"
        
        return bot_response, False, None
        
    except Exception as e:
        print(f"Erro ao obter resposta da OpenAI: {e}")
        return "Desculpe, estou com dificuldades para processar sua solicita√ß√£o no momento. Posso ajudar com algo mais simples ou voc√™ prefere falar com um atendente humano?", False, None

def processar_cotacao_completa(data_collector, phone_number):
    """
    Processa a cota√ß√£o quando todos os dados est√£o completos.
    """
    try:
        # Obter dados formatados para o SwissRe
        dados_animal = data_collector.get_formatted_data_for_swissre()
        
        # Mostrar resumo final para confirma√ß√£o
        resumo = data_collector.get_summary()
        resposta_confirmacao = f"""‚úÖ **Perfeito! Coletei todas as informa√ß√µes necess√°rias.**

{resumo}

üîÑ **Iniciando processo de cota√ß√£o...**

Vou processar sua solicita√ß√£o no sistema da seguradora. Isso pode levar alguns minutos. 

üìÑ Assim que a cota√ß√£o estiver pronta, enviarei o documento PDF com todos os detalhes.

‚è≥ Por favor, aguarde..."""

        # Executar cota√ß√£o em background (voc√™ pode implementar isso como uma tarefa ass√≠ncrona)
        try:
            sucesso, mensagem, pdf_path = executar_cotacao_swissre(dados_animal)
            
            if sucesso and pdf_path:
                # Enviar PDF via WhatsApp
                if send_pdf_to_whatsapp(phone_number, pdf_path, dados_animal):
                    resposta_final = """üéâ **Cota√ß√£o conclu√≠da com sucesso!**

üìÑ Enviei o documento PDF com sua cota√ß√£o via WhatsApp.

O arquivo cont√©m:
‚Ä¢ Detalhes da cobertura
‚Ä¢ Valor do pr√™mio
‚Ä¢ Condi√ß√µes gerais
‚Ä¢ Instru√ß√µes para contrata√ß√£o

üí¨ Se tiver d√∫vidas ou desejar prosseguir com a contrata√ß√£o, estou √† disposi√ß√£o!

‚úÖ Obrigado por escolher a Equinos Seguros!"""
                else:
                    resposta_final = """‚úÖ **Cota√ß√£o processada com sucesso!**

‚ùå Houve um problema t√©cnico no envio do PDF. 

üîÑ **Vou tentar reenviar em alguns instantes.**

üí¨ Se n√£o receber o documento, entre em contato conosco para que possamos enviar por outro meio.

Obrigado pela paci√™ncia!"""
            else:
                resposta_final = f"""‚ùå **Problema no processamento da cota√ß√£o**

Detalhes: {mensagem}

üîÑ **Vou tentar novamente em alguns instantes.**

üí¨ Se o problema persistir, um de nossos atendentes entrar√° em contato com voc√™.

Pedimos desculpas pelo inconveniente."""
                
        except Exception as e:
            print(f"Erro ao executar cota√ß√£o: {e}")
            resposta_final = """‚ùå **Problema t√©cnico no sistema de cota√ß√£o**

üîß Nosso sistema est√° temporariamente indispon√≠vel.

üë®‚Äçüíº **Um atendente humano entrar√° em contato com voc√™ em breve** para processar sua cota√ß√£o manualmente.

üìû Ou voc√™ pode ligar para nosso atendimento se preferir.

Pedimos desculpas pelo inconveniente."""
        
        return resposta_confirmacao, False, None
        
    except Exception as e:
        print(f"Erro ao processar cota√ß√£o completa: {e}")
        return "Ocorreu um erro ao processar sua cota√ß√£o. Um atendente entrar√° em contato com voc√™ em breve.", False, None

